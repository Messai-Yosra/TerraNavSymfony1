security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        utilisateur_provider:
            entity:
                class: App\Entity\Utilisateur
                property: email # Use the username field for authentication

    # Configuration correcte du firewall
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: utilisateur_provider # Assurez-vous que ce provider existe

            # Enable form login
            form_login:
                login_path: app_login
                check_path: app_login_check
                # Redirection directe vers le dashboard client
                default_target_path: admin_dashboard
                always_use_default_target_path: true
                use_referer: false
                use_forward: false
                
            logout:
                path: app_logout
                target: app_login

    # Réorganisation des règles d'accès
    access_control:
        # Routes publiques en premier
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/signup$, roles: PUBLIC_ACCESS }
        - { path: ^/login_check$, roles: PUBLIC_ACCESS }
        - { path: ^/logout$, roles: PUBLIC_ACCESS }
        
        # Routes qui nécessitent authentification
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/admin, roles: ROLE_ADMIN }
        
        # Routes temporairement ouvertes pour débogage
        - { path: ^/DashboardClient, roles: PUBLIC_ACCESS }
        - { path: ^/admin/user, roles: PUBLIC_ACCESS }
        
        # Règle générale - utilisez IS_AUTHENTICATED_ANONYMOUSLY au lieu de PUBLIC_ACCESS
        # pour les routes qui devraient être accessibles sans authentification
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
