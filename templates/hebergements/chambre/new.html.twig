{% extends 'baseClient.html.twig' %}

{% block title %}Cr√©er une nouvelle chambre{% endblock %}

{% block content %}
    {% form_theme form 'bootstrap_5_layout.html.twig' %}

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Cr√©er une nouvelle chambre</h1>
            <a href="{{ path('app_chambre_index') }}" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Retour √† la liste
            </a>
        </div>

        {{ form_start(form, {'attr': {'class': 'needs-validation', 'enctype': 'multipart/form-data', 'novalidate': 'novalidate'}}) }}

        {% if form.vars.errors|length > 0 %}
            <div class="alert alert-danger">
                <ul class="mb-0">
                    {% for error in form.vars.errors %}
                        <li>{{ error.message }}</li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

        <!-- üü® Bloc 1 : Informations de base -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-warning text-dark fw-bold">üìÅ Informations de base</div>
            <div class="card-body row">
                <div class="col-md-4">{{ form_row(form.numero) }}</div>
                <div class="col-md-4 d-flex align-items-center">{{ form_row(form.disponibilite) }}</div>
                <div class="col-md-4">
                    <div class="row g-2">
                        <div class="col-8">
                            {{ form_label(form.prix) }}
                            {{ form_widget(form.prix, {'attr': {'class': 'form-control'}}) }}
                            {{ form_errors(form.prix) }}
                        </div>
                        <div class="col-4">
                            {{ form_label(form.devise) }}
                            {{ form_widget(form.devise, {'attr': {'class': 'form-select currency-selector'}}) }}
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="capacity-input-group">
                        {{ form_label(form.capacite) }}
                        <div class="input-group">
                            <button type="button" class="btn btn-outline-warning" onclick="decrementCapacity()">
                                <i class="fas fa-minus"></i>
                            </button>
                            {{ form_widget(form.capacite, {
                                'attr': {
                                    'class': 'form-control text-center',
                                    'min': '1',
                                    'value': '1'
                                }
                            }) }}
                            <button type="button" class="btn btn-outline-warning" onclick="incrementCapacity()">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        {{ form_errors(form.capacite) }}
                    </div>
                </div>
                <div class="col-md-4">{{ form_row(form.taille) }}</div>
                <div class="col-md-4">{{ form_row(form.vue) }}</div>
            </div>
        </div>

        <!-- üü® Bloc 2 : Description -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-warning text-dark fw-bold">üìù Description et d√©tails</div>
            <div class="card-body row">
                <div class="col-md-6">
                    {{ form_label(form.description) }}
                    {{ form_widget(form.description, {'attr': {'class': 'form-control', 'maxlength': '1000'}}) }}
                    <small class="form-text text-muted"><span id="description-counter">0</span>/1000 caract√®res</small>

                    <!-- Bouton IA -->
                    <div class="mt-2">
                        <button type="button" class="btn btn-outline-primary btn-sm" id="btn-ai-description">
                            ‚ú® Am√©liorer la description via l'IA
                        </button>
                    </div>
                </div>
                <div class="col-md-6">
                    {{ form_label(form.equipements) }}
                    {{ form_widget(form.equipements, {'attr': {'class': 'form-control', 'maxlength': '500'}}) }}
                    <small class="form-text text-muted"><span id="equipements-counter">0</span>/500 caract√®res</small>
                </div>
                <div class="col-md-6">{{ form_row(form.url_3d) }}</div>
                <div class="col-md-6">{{ form_row(form.hebergement) }}</div>
            </div>
        </div>

        <!-- üü® Bloc 3 : Images -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-warning text-dark fw-bold">üñºÔ∏è Images de la chambre</div>
            <div class="card-body">
                {{ form_row(form.images) }}
                <small class="form-text text-muted">Formats accept√©s : JPG, PNG, WEBP (max 5MB)</small>
                <div id="image-preview" class="d-flex flex-wrap gap-3 mt-3"></div>
            </div>
        </div>

        <!-- Boutons -->
        <div class="text-end mt-4">
            <button type="submit" class="btn btn-primary me-2">
                <i class="fas fa-save me-1"></i> Enregistrer
            </button>
            <button type="reset" class="btn btn-outline-secondary" onclick="resetValidation()">
                <i class="fas fa-eraser me-1"></i> R√©initialiser
            </button>
        </div>

        {{ form_end(form) }}
    </div>

    <style>
        .form-control,
        .form-select {
            border-radius: 8px;
            padding: 10px 14px;
            border: 1px solid #ced4da;
            font-size: 0.95rem;
            transition: all 0.3s ease;
        }

        .currency-selector {
            padding: 8px;
            height: calc(100% - 32px); /* Ajustement pour l'alignement avec le champ prix */
            margin-top: 32px; /* Pour aligner avec le champ prix */
        }

        .form-control:focus,
        .form-select:focus {
            border-color: #ffa500;
            box-shadow: 0 0 0 0.2rem rgba(255, 165, 0, 0.25);
        }

        .card-header {
            font-weight: bold;
            padding: 10px 20px;
            font-size: 1.05rem;
            background-color: #ffc107 !important;
        }

        input[type="file"]::file-selector-button {
            background-color: #ffa500;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-right: 10px;
            border-radius: 6px;
            cursor: pointer;
            transition: 0.3s;
        }

        input[type="file"]::file-selector-button:hover {
            background-color: #e69500;
        }

        .form-check-input {
            transform: scale(1.2);
            margin-top: 0.5rem;
            accent-color: #ffa500;
        }

        .btn-primary {
            background-color: #ff8800;
            border-color: #ff8800;
        }

        .btn-primary:hover {
            background-color: #e67300;
            border-color: #e67300;
        }

        .capacity-input-group .input-group {
            width: 100%;
            margin-top: 8px;
        }

        .capacity-input-group .form-control {
            text-align: center;
            border-left: 1px solid #ced4da;
            border-right: 1px solid #ced4da;
        }

        .capacity-input-group .btn {
            border-color: #ced4da;
            color: #ffa500;
            padding: 0.375rem 0.75rem;
            z-index: 0;
        }

        .capacity-input-group .btn:hover {
            background-color: #ffa500;
            border-color: #ffa500;
            color: white;
        }

        .capacity-input-group input[type="number"]::-webkit-inner-spin-button,
        .capacity-input-group input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Gestion du changement de devise
            const deviseSelect = document.querySelector('.currency-selector');
            const priceInput = document.getElementById('{{ form.prix.vars.id }}');
            const priceLabel = priceInput.closest('.col-8').querySelector('label');

            if (deviseSelect) {
                deviseSelect.addEventListener('change', function() {
                    const selectedCurrency = this.value;
                    const displayCurrency = selectedCurrency === 'auto' ? 
                        priceInput.dataset.originalCurrency : selectedCurrency;

                    // Mettre √† jour le label du prix
                    priceLabel.textContent = `Prix par nuit (${displayCurrency})`;

                    // Enregistrer la devise s√©lectionn√©e dans la session
                    fetch('{{ path('app_change_currency') }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: `currency=${selectedCurrency}`
                    });
                });
            }

            // Compteurs de caract√®res existants
            const description = document.getElementById('{{ form.description.vars.id }}');
            const equipements = document.getElementById('{{ form.equipements.vars.id }}');
            if (description) {
                description.addEventListener('input', () => {
                    document.getElementById('description-counter').textContent = description.value.length;
                });
            }
            if (equipements) {
                equipements.addEventListener('input', () => {
                    document.getElementById('equipements-counter').textContent = equipements.value.length;
                });
            }

            // Am√©lioration de la description via l'IA
           const btnAI = document.getElementById('btn-ai-description');
const API_KEY = 'AIzaSyCRrEnuk9oUbLaN9LA4VXvGrvmfeUM1YU8';

if (btnAI && description) {
    btnAI.addEventListener('click', async () => {
        const originalText = description.value.trim();

        if (!originalText) {
            alert("Veuillez d'abord √©crire une description √† am√©liorer.");
            return;
        }

        btnAI.disabled = true;
        const originalContent = btnAI.innerHTML;
        btnAI.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Am√©lioration en cours...';

        const requestBody = {
            contents: [
                {
                    parts: [
                        {
                            text: `Am√©liore cette description d'une chambre destin√©e √† une plateforme de location. 
                            Le ton doit √™tre professionnel, accueillant et attrayant pour des voyageurs.
                            Fais une seule version, courte (2 phrases), sans puces ni titres. 
                            Sois clair, fluide, et valorise le confort, la d√©coration et la localisation si possible.
                            : ${originalText}`
                        }
                    ]
                }
            ]
        };

        try {
            const response = await fetch(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyCRrEnuk9oUbLaN9LA4VXvGrvmfeUM1YU8`,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                }
            );

            if (!response.ok) {
                throw new Error(`Erreur de requ√™te : ${response.status}`);
            }

            const data = await response.json();

            const improvedText = data?.candidates?.[0]?.content?.parts?.[0]?.text;

            if (improvedText) {
                description.value = improvedText;
                document.getElementById('description-counter').textContent = improvedText.length;
                
            } else {
                throw new Error("La r√©ponse de l'IA est vide.");
            }
        } catch (error) {
            alert("Erreur : " + error.message);
        } finally {
            btnAI.disabled = false;
            btnAI.innerHTML = originalContent;
        }
    });
}

            // Initialisation de la capacit√©
            const capaciteInput = document.getElementById('{{ form.capacite.vars.id }}');
            if (capaciteInput && !capaciteInput.value) {
                capaciteInput.value = '1';
            }
        });

        function previewImages(input) {
            const previewContainer = document.getElementById('image-preview');
            previewContainer.innerHTML = '';
            if (input.files) {
                Array.from(input.files).forEach((file) => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const div = document.createElement('div');
                        div.className = 'image-preview-container';
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.className = 'image-preview';
                        div.appendChild(img);
                        previewContainer.appendChild(div);
                    };
                    reader.readAsDataURL(file);
                });
            }
        }

        function resetValidation() {
            document.querySelector('.needs-validation').classList.remove('was-validated');
            document.querySelectorAll('input, select, textarea').forEach(el => {
                el.classList.remove('is-valid', 'is-invalid');
            });
            document.getElementById('image-preview').innerHTML = '';
            document.getElementById('description-counter').textContent = '0';
            document.getElementById('equipements-counter').textContent = '0';
        }

        function incrementCapacity() {
            const input = document.getElementById('{{ form.capacite.vars.id }}');
            const currentValue = parseInt(input.value) || 0;
            input.value = currentValue + 1;
        }

        function decrementCapacity() {
            const input = document.getElementById('{{ form.capacite.vars.id }}');
            const currentValue = parseInt(input.value) || 2;
            if (currentValue > 1) {
                input.value = currentValue - 1;
            }
        }
    </script>
{% endblock %}
