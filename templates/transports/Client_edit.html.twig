{% extends "baseClient.html.twig" %}

{% block titre %}Modifier un Transport{% endblock %}

{% block content %}
    <link rel="stylesheet" href="{{ asset('css/transports/CrudAgence.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <div class="transport-booking-container">
        <section class="hero-section">
            <div class="hero-content">
                <h1>Modifier un Transport</h1>
                <p>Mettez à jour les détails de votre service de transport</p>
            </div>
        </section>

        <div class="search-container">
            <h2>Modifier {{ transport.nom }}</h2>
            {{ form_start(form, {
                'attr': {
                    'class': 'search-form',
                    'novalidate': 'novalidate',
                    'id': 'transport-form',
                    'enctype': 'multipart/form-data'
                }
            }) }}
                <div class="form-section">
                    <h3>Informations de base</h3>
                    <div class="form-row">
                        <div class="form-group">
                            {{ form_label(form.nom) }}
                            {{ form_widget(form.nom, {'attr': {'class': 'form-control'}}) }}
                            <span class="form-error" data-for="nom"></span>
                        </div>
                        <div class="form-group">
                            {{ form_label(form.type) }}
                            {{ form_widget(form.type, {'attr': {'class': 'form-control'}}) }}
                            <span class="form-error" data-for="type"></span>
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <h3>Détails</h3>
                    <div class="form-row">
                        <div class="form-group">
                            {{ form_label(form.capacite) }}
                            {{ form_widget(form.capacite, {'attr': {'class': 'form-control'}}) }}
                            <span class="form-error" data-for="capacite"></span>
                        </div>
                        <div class="form-group">
                            {{ form_label(form.prix) }}
                            {{ form_widget(form.prix, {'attr': {'class': 'form-control'}}) }}
                            <span class="form-error" data-for="prix"></span>
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <h3>Informations supplémentaires</h3>
                    <div class="form-group full-width">
                        {{ form_label(form.description) }}
                        {{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': 4}}) }}
                        <span class="form-error" data-for="description"></span>
                    </div>
                    <div class="form-group full-width">
                        {{ form_label(form.contact) }}
                        {{ form_widget(form.contact, {'attr': {'class': 'form-control'}}) }}
                        <span class="form-error" data-for="contact"></span>
                    </div>
                    <div class="form-group full-width">
                        {{ form_label(form.imagePath) }}
                        {{ form_widget(form.imagePath, {'attr': {'class': 'form-control file-input'}}) }}
                        <span class="file-msg">
                            {% if transport.imagePath %}
                                Image actuelle : {{ transport.imagePath|split('/')|last }}
                            {% else %}
                                Aucun fichier sélectionné
                            {% endif %}
                        </span>
                        {% if transport.imagePath %}
                            <div class="mt-2">
                                <img src="{{ asset(transport.imagePath) }}" alt="{{ transport.nom }}" class="img-fluid rounded" style="max-height: 100px;">
                            </div>
                        {% endif %}
                        <span class="form-error" data-for="imagePath"></span>
                    </div>
                </div>

                <div class="form-group text-center mt-4">
                    <button type="submit" class="btn btn-primary search-button">
                        <span class="submit-text">Mettre à jour</span>
                        <span class="loading-spinner" style="display: none;">
                            <i class="fas fa-spinner fa-spin"></i> Mise à jour...
                        </span>
                    </button>
                    <a href="{{ path('client_transports_list') }}" class="btn btn-secondary rounded-pill ms-2">Annuler</a>
                </div>
            {{ form_end(form) }}
        </div>

        <section class="cta-section">
            <div class="cta-content">
                <h2>Gérez vos transports</h2>
                <p>Modifiez vos services pour offrir la meilleure expérience à vos clients</p>
                <div class="cta-buttons">
                    <a href="{{ path('client_transports_list') }}" class="btn-primary">Voir tous les transports</a>
                </div>
            </div>
        </section>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('transport-form');
            const submitButton = form.querySelector('button[type="submit"]');
            const submitText = submitButton.querySelector('.submit-text');
            const loadingSpinner = submitButton.querySelector('.loading-spinner');
            const fileInput = form.querySelector('.file-input');
            const fileMsg = form.querySelector('.file-msg');

            // Update file input message on change
            if (fileInput && fileMsg) {
                fileInput.addEventListener('change', function() {
                    fileMsg.textContent = this.files.length 
                        ? this.files[0].name 
                        : "{% if transport.imagePath %}Image actuelle : {{ transport.imagePath|split('/')|last }}{% else %}Aucun fichier sélectionné{% endif %}";
                });
            }

            // Form submission
            form.addEventListener('submit', async function(event) {
                event.preventDefault();
                
                submitText.style.display = 'none';
                loadingSpinner.style.display = 'inline-block';
                submitButton.disabled = true;

                try {
                    const formData = new FormData(form);
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    // Clear previous errors
                    document.querySelectorAll('.form-error').forEach(el => {
                        el.textContent = '';
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw data;
                    }

                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: data.title || 'Succès',
                            text: data.message || 'Transport mis à jour avec succès',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            if (data.redirect) {
                                window.location.href = data.redirect;
                            }
                        });
                    } else {
                        showFormErrors(data.errors || {});
                    }
                } catch (error) {
                    console.error('Error:', error);
                    
                    if (error.errors) {
                        showFormErrors(error.errors);
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: error.title || 'Erreur',
                            text: error.message || 'Une erreur est survenue lors de la mise à jour',
                        });
                    }
                } finally {
                    submitText.style.display = 'inline-block';
                    loadingSpinner.style.display = 'none';
                    submitButton.disabled = false;
                }
            });

            function showFormErrors(errors) {
                Object.entries(errors).forEach(([field, message]) => {
                    const errorElement = document.querySelector(`.form-error[data-for="${field}"]`);
                    if (errorElement) {
                        errorElement.textContent = message;
                    }
                });

                const firstError = Object.values(errors)[0];
                if (firstError) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Erreur de validation',
                        text: firstError,
                    });
                }
            }

            // Flash messages
            {% for message in app.flashes('success') %}
                Swal.fire({
                    position: 'top-end',
                    icon: 'success',
                    title: '{{ message }}',
                    showConfirmButton: false,
                    timer: 3000,
                    toast: true
                });
            {% endfor %}
            {% for message in app.flashes('error') %}
                Swal.fire({
                    position: 'top-end',
                    icon: 'error',
                    title: '{{ message }}',
                    showConfirmButton: false,
                    timer: 3000,
                    toast: true
                });
            {% endfor %}
        });
    </script>
{% endblock %}